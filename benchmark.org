#+TITLE: Benchmarks of various cryptographic functions

The objective of this work is to measure the time different cryptograhic primitives take with text files of various sizes.

The operations we're gonna test are:
  - Symmetric encryption and decryption using the AES algorithm.
  - Asymmetric encryption and decryption using the RSA algorithm.
  - Hashing using the SHA2-256 algorithm.

This program will be done using [[https://en.wikipedia.org/wiki/Literate_programming][Literate Programming]], as to make the program itself and the report one and the same, removing the need to switch back and forth while reading the report to see the implementation.

Expanding on the above point, we will be specifically be using [[https://orgmode.org/worg/org-contrib/babel/][Org-Babel]], which comes included in [[https://www.gnu.org/software/emacs/][Emacs]] by default.

* How this program works (in steps):
1. Generates all files that we will run the tests on.
2. Runs multiple simulations of encrypting, decrypting and hashing on a given set of files
3. Records various performance metrics.
4. Computes the average of those metrics.
5. Displays them visually using plots.

TODO: Import libraries

First we need to declare our globals:
1. The number of simulations we will run.
2. The list of file sizes we will use to generate the files used for the benchmarks.

Obviously the more simulations we run the more precise the results will be, altough a high number ofsimulations will significantly slow down our program.
100 simulations should be a good starting point.

Its also important to note that the first simulation will be significantly slower than the subsequent ones due to cold-cache.

#+begin_src lisp :results silent
  (defvar +SIMULATIONS+ 100)
  (defvar +AES-FILE-SIZES+ '(8 64 512 32768 262144 2097152))
  (defvar +RSA-FILE-SIZES+ '(2 4 8 16 32 64 128))
  (defvar +HASH-FILE-SIZES+ '(8 64 512 32768 262144 2097152))
#+end_src

Before running the tests on a given file we must first create it, for that we will define generate-file function that takes its size, and optionally, a prefix and suffix as its arguments.
The function will then create a file (if it doesn't already exist) or override the contents of an existing one by filling it with random ascii (not utf!) characters as to make it of a given size.

The reason for format to only write 2 characters at a time to a file is due to 2 being the [[https://en.wikipedia.org/wiki/Greatest_common_divisor][Greatest Common Divisor]] of all file sizes defined above.

TODO: Perhaps replace the link to the relevant sections of the posix standard?
When we finish writing to the file, a newline is inserted at the end, [[https://stackoverflow.com/questions/729692/why-should-text-files-end-with-a-newline][this is the recommended thing to do]] when it comes to text files.

#+begin_src lisp :results silent
  (defun generate-file (size &key (prefix "") (suffix ""))
    "Generates a file of a given size, named *prefix*size*suffix*."
    (with-open-file (stream (merge-pathnames
                             (concatenate 'string prefix (write-to-string size) suffix)
                             (uiop/os:getcwd))
                            :external-format :ASCII
                            :direction :output
                            :if-exists :supersede
                            :if-does-not-exist :create)
      (dotimes (i (- (floor size 2) 1) nil)
        (format stream "ab"))
      (format stream "~C~C" #\c #\linefeed)))
#+end_src

For this particular program we will need to create various different files, each of them of a different size and each of them for a different purpose.
The bellow function accepts a list of sizes (in bytes), optionally a prefix and suffix and creates all files, or overrides their contents, if they already exist.

#+begin_src lisp :results silent
  (defun generate-files (sizes &key (prefix "") (suffix ""))
    "Creates a set of files of a given size, named *prefi*size*suffix*."
    (dolist (size sizes nil)
      (generate-file size :prefix prefix :suffix suffix)))
#+end_src
